{"version":3,"sources":["components/EmpJumbotron/EmpJumbotron.js","components/EmployeeDetails/EmployeeDetails.js","components/SearchForm/SearchForm.js","App.js","serviceWorker.js","index.js"],"names":["EmpJumbotron","Jumbotron","fluid","Container","className","EmployeeDetails","props","first_name","last_name","email","job_title","department","phone","SearchForm","Form","inline","FormGroup","Label","for","Input","type","title","name","id","placeholder","onChange","handleInputChange","value","App","state","employees","filtered","event","console","log","target","inputValue","setState","filterNames","handleSort","preventDefault","sort","a","b","this","filter","employee","indexOf","Table","striped","bordered","hover","variant","onClick","map","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"2RAgBeA,EAbM,WACjB,OACI,6BACA,kBAACC,EAAA,EAAD,CAAWC,OAAK,GACd,kBAACC,EAAA,EAAD,CAAWD,OAAK,GACd,wBAAIE,UAAU,aAAd,sBACA,uBAAGA,UAAU,QAAb,8CCMGC,EAbS,SAAAC,GACpB,OACA,4BACI,4BAAKA,EAAMC,YACX,4BAAKD,EAAME,WACX,4BAAKF,EAAMG,OACX,4BAAKH,EAAMI,WACX,4BAAKJ,EAAMK,YACX,4BAAKL,EAAMM,S,gCCYJC,EAlBI,SAAAP,GACf,OACE,kBAACQ,EAAA,EAAD,CAAMC,QAAM,GACZ,kBAACC,EAAA,EAAD,CAAWZ,UAAU,wBACnB,kBAACa,EAAA,EAAD,CAAOC,IAAI,OAAOd,UAAU,WAA5B,WACA,kBAACe,EAAA,EAAD,CACAC,KAAK,OACLC,MAAM,aACNC,KAAK,aACLC,GAAG,aACHC,YAAY,oBACZC,SAAUnB,EAAMoB,kBAChBC,MAAOrB,EAAMC,gB,QC+FNqB,E,4MArGbC,MAAQ,CACNtB,WAAY,GACZuB,YACAC,SAAU,I,EAIdL,kBAAoB,SAAAM,GAClBC,QAAQC,IAAIF,EAAMG,OAAOR,OACzB,IAAMS,EAAaJ,EAAMG,OAAOR,MAChC,EAAKU,SAAS,CAAE9B,WAAY6B,IAC5B,EAAKE,YAAYF,I,EAoBnBG,WAAa,SAACP,GACZA,EAAMQ,iBACNV,EAAUW,MAAK,SAACC,EAAEC,GAAH,OAASD,EAAEnC,WAAaoC,EAAEpC,YAAc,EAAI,M,0DAlBhD6B,GAAa,IAEpBL,EADkBa,KAAKf,MAAnBC,UACiBe,QAAO,SAAAC,GAAQ,OACtCA,EAASvC,WAAauC,EAASvC,WAAWwC,QAAQX,IAAc,EAAI,QACtEQ,KAAKP,SAAS,CAAEN,aAChBE,QAAQC,IAAIH,K,+BAiCV,OACA,oCACE,kBAAC,EAAD,MACA,kBAAC,EAAD,CACEV,MAAOuB,KAAKf,MAAMtB,WAClBmB,kBAAmBkB,KAAKlB,oBAE5B,6BACE,kBAACsB,EAAA,EAAD,CAAOC,SAAO,EAACC,UAAQ,EAACC,OAAK,EAACC,QAAQ,QACpC,+BACE,4BACE,wBAAIC,QAAST,KAAKL,YAAlB,cACA,yCACA,qCACA,yCACA,0CACA,uCAGJ,+BACCK,KAAKf,MAAME,SAAS,GAAKa,KAAKf,MAAME,SAASuB,KAAI,SAAAR,GAAQ,OACxD,kBAAC,EAAD,CACEvB,GAAIuB,EAASvB,GACbgC,IAAKT,EAASvB,GACdhB,WAAYuC,EAASvC,WACrBC,UAAWsC,EAAStC,UACpBC,MAAOqC,EAASrC,MAChBC,UAAWoC,EAASpC,UACpBC,WAAYmC,EAASnC,WACrBC,MAAOkC,EAASlC,WACdgC,KAAKf,MAAMC,UAAUwB,KAAI,SAAAR,GAAQ,OACrC,kBAAC,EAAD,CACEvB,GAAIuB,EAASvB,GACbgC,IAAKT,EAASvB,GACdhB,WAAYuC,EAASvC,WACrBC,UAAWsC,EAAStC,UACpBC,MAAOqC,EAASrC,MAChBC,UAAWoC,EAASpC,UACpBC,WAAYmC,EAASnC,WACrBC,MAAOkC,EAASlC,kB,GA9FV4C,a,MCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzC,QAAQyC,MAAMA,EAAMC,a","file":"static/js/main.44f7e7ac.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Jumbotron, Container } from 'reactstrap'\r\n\r\nconst EmpJumbotron = () => {\r\n    return (\r\n        <div>\r\n        <Jumbotron fluid>\r\n          <Container fluid>\r\n            <h1 className=\"display-3\">Employee Directory</h1>\r\n            <p className=\"lead\">Filter by name and sort alphabetically</p>\r\n          </Container>\r\n        </Jumbotron>\r\n      </div>\r\n    )\r\n}\r\n\r\nexport default EmpJumbotron","import React from 'react'\r\n\r\nconst EmployeeDetails = props => {\r\n    return (\r\n    <tr>\r\n        <td>{props.first_name}</td>\r\n        <td>{props.last_name}</td>\r\n        <td>{props.email}</td>\r\n        <td>{props.job_title}</td>\r\n        <td>{props.department}</td>\r\n        <td>{props.phone}</td>\r\n    </tr>\r\n    )\r\n}\r\n\r\nexport default EmployeeDetails","import React from 'react'\nimport { Form, FormGroup, Label, Input } from 'reactstrap'\n\n\nconst SearchForm = props => {\n    return (\n      <Form inline>\n      <FormGroup className=\"mb-2 mr-sm-2 mb-sm-0\">\n        <Label for=\"name\" className=\"mr-sm-2\">Search:</Label>\n        <Input \n        type=\"name\" \n        title=\"first_name\" \n        name=\"first_name\" \n        id=\"first_name\" \n        placeholder=\"start typing name\"\n        onChange={props.handleInputChange}\n        value={props.first_name} />\n      </FormGroup>\n    </Form>\n    )\n}\n\nexport default SearchForm","import React, {Component} from 'react'\nimport './App.css'\nimport employees from './employees.json'\nimport EmpJumbotron from './components/EmpJumbotron'\nimport EmployeeDetails from './components/EmployeeDetails'\nimport SearchForm from './components/SearchForm'\nimport Table from 'react-bootstrap/Table'\n\nclass App extends Component {\n//setting this.state.employees to the employees json array\n  state = {\n    first_name: '',\n    employees,\n    filtered: []\n  }\n\n//handle input change\nhandleInputChange = event => {\n  console.log(event.target.value)\n  const inputValue = event.target.value\n  this.setState({ first_name: inputValue})\n  this.filterNames(inputValue)\n}\n\n//handle filtering name\nfilterNames (inputValue) {\n  const { employees } = this.state\n  let filtered = employees.filter(employee => \n    employee.first_name ? employee.first_name.indexOf(inputValue) >=0 : null)\n  this.setState({ filtered })\n  console.log(filtered)\n  \n}\n\n\n//handle filter by name\n// handleFilter = event => {\n//   event.preventDefault()\n//   const employees = this.setState({ employees: employees.filter(emp => emp.name.indexOf(input) !== -1)})\n// }\n//handle sort\nhandleSort = (event) => {\n  event.preventDefault()\n  employees.sort((a,b) => a.first_name < b.first_name ? -1 : 1)\n\n  // event.preventDefault()\n  // employees.sort(function(a,b){\n  // return a.first_name < b.first_name ? -1:1\n// })\n}\n\n\n  // handleFilter(e){\n  //   e.preventDefault()\n  //   let input = e.target.value\n  //   this.setState({\n  //     originalEmployees: employees.filter(emp => emp.name.indexOf(input) !== -1)\n  //   })\n    // filter original employees using the input updating employees\n\n  // }\n\n  render(){\n    return (\n    <>\n      <EmpJumbotron></EmpJumbotron>\n      <SearchForm\n        title={this.state.first_name}\n        handleInputChange={this.handleInputChange}\n      />\n    <hr></hr>\n      <Table striped bordered hover variant=\"dark\">\n        <thead>\n          <tr>\n            <th onClick={this.handleSort}>First Name</th>\n            <th>Last Name</th>\n            <th>Email</th>\n            <th>Job Title</th>\n            <th>Department</th>\n            <th>Phone</th>\n          </tr>\n        </thead>\n        <tbody>        \n        {this.state.filtered[0] ? this.state.filtered.map(employee => (\n          <EmployeeDetails\n            id={employee.id}\n            key={employee.id}\n            first_name={employee.first_name}\n            last_name={employee.last_name}\n            email={employee.email}\n            job_title={employee.job_title}\n            department={employee.department}\n            phone={employee.phone}/>\n        ))  : this.state.employees.map(employee => (\n          <EmployeeDetails\n            id={employee.id}\n            key={employee.id}\n            first_name={employee.first_name}\n            last_name={employee.last_name}\n            email={employee.email}\n            job_title={employee.job_title}\n            department={employee.department}\n            phone={employee.phone}/>\n          ))}\n        </tbody>\n      </Table>\n    </>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}